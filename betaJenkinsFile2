pipeline {
    agent any
    environment {
        def pathVariable = "s3://sha-buck-01/${env.JOB_NAME}/${env.BUILD_ID}/"
    }

    stages {
        stage('Job Started notification') {
            steps {
                echo "Job Started notification ..."   
                script {
                    emailext (
                        mimeType: 'text/html',
                        to:"shanetownsend24@hotmail.com", 
                        subject: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'", 
                        body: """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                        <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
                    )
                }    
            }
        }
    
        stage ('Compile Stage') {

            steps {
                withMaven(maven : 'Maven') {
                    echo "Compile Stage ..."
                    sh 'mvn compile'
                }
            }
        }
        
        stage ('Test Stage') {

            steps {
                withMaven(maven : 'Maven') {
                    sh 'mvn test'
                }
            }
        }
            
        
        stage ('Package Stage') {

            steps {
                withMaven(maven : 'Maven') {
                    echo "Package Stage ..."
                    sh 'mvn package'
                }
            }
        }   
        
        
        stage('SonarQube Analysis Stage') {
            steps {
                echo "SonarQube Analysis Stage ..."   
            }
        }
        
        stage('Quality Gate Stage') {
            steps {
                echo "Quality Gate Stage ..."   
            }
        }
        
        stage ('RenameWar Stage') {

            steps {
                echo "RenameWar Stage ..."
                sh 'mv /var/lib/jenkins/workspace/first-pipeline/target/rest-hateoas-0.0.1-SNAPSHOT.war /var/lib/jenkins/workspace/first-pipeline/target/simple-rest.war'
            }
        }   
        
       stage ('Deploy to S3 Repository Stage') {

           steps { 
                echo "Deploy to S3 Repository Stage; path name=${pathVariable} ..."
                sh 'aws s3 cp /var/lib/jenkins/workspace/first-pipeline/target/simple-rest.war  ${pathVariable}'
            }
        }   
        
        // stage ('Deploy To Tomcat Server Stage') {
            // steps {
                // sshagent(['tomcat-dev']) {
                    // echo "Deploy To Tomcat Server Stage ..."
                    // sh 'scp -v -o StrictHostKeyChecking=no /var/lib/jenkins/workspace/first-pipeline/target/simple-rest.war ec2-user@ec2-34-251-146-237.eu-west-1.compute.amazonaws.com:/home/ec2-user/apache-tomcat-8.5.34/webapps/' 
                // }
            // }    
        // } 
        
        stage ('Integration Testing Stage') {
            steps {                
                // 1)   Create postman collection and associate postman environment variables	
                // 2)   Copy the postman collection JSON and the postman environment variables to this Linux server. Use PSCP to transfer these files successfully. 
                // 3)	Install Docker. 
                // 4)	Pull Docker Newman image.
                // 5)	Test run (Docker run on the image) the collection which also references the environment variables on the command line.   
                // 6)	Within this Jenkins File execute a script to run the collection which also references the environment variables.   
                echo "Integration Testing Stage ..."
                sh 'whoami'
                sh 'docker run -t postman/newman_ubuntu1404 run "https://github.com/ShaneTownsend/SimpleRestResource/blob/master/Simple-Rest-Service-Tests.postman_collection.json" --disable-unicode'
            }
        }   
        
    }
    post {
        always {  
            echo 'This will always run'  
        }  
        success {  
            echo 'This will run only if successful'  
            script {
                emailext (
                    mimeType: 'text/html',
                    to:"shanetownsend24@hotmail.com",
                    subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                    <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
                )
            }        
        }  
        failure {  
            echo 'This will run only if failure - usually a red status'   
            script {
                emailext (
                    mimeType: 'text/html',
                    to:"shanetownsend24@hotmail.com",
                    subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: """<p>FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                    <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
                )
            } 
        }  
        unstable {  
            echo 'This will run only if the run was marked as unstable - usually a yellow status'  
            echo 'This will run only if failure - usually a red status'   
            script {
                emailext (
                    mimeType: 'text/html',
                    to:"shanetownsend24@hotmail.com",
                    subject: "UNSTABLE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: """<p>UNSTABLE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                    <p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""
                )
            } 
        }  
         
    }
}
